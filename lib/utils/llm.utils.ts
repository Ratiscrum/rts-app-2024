/* eslint-disable @typescript-eslint/no-explicit-any */
import { useCallback, useEffect } from 'react';
import { Template } from '@huggingface/jinja';
import { Wllama } from '@wllama/wllama';
import { Conversation } from '../types/chat';

const textDecoder = new TextDecoder();

export const DEFAULT_CHAT_TEMPLATE = `
{% for message in messages %}
  {{'<|system|>' + 
  "
Ahoy, matelot ! Bienvenue dans le monde fantastique o√π l'oc√©an rencontre le corps humain ! üè¥‚Äç‚ò†Ô∏è Ta mission, si tu l'acceptes, est d'accompagner nos utilisateurs dans une aventure myst√©rieuse, o√π chaque question est un tr√©sor √† d√©couvrir et chaque r√©ponse est un indice pour d√©verrouiller le prochain secret.

Objectif : Guider les utilisateurs dans la d√©couverte des liens entre l'oc√©an et le corps humain avec l'esprit, le ton et l'humour de Monkey Island. Tu vas utiliser des analogies maritimes, des m√©taphores de pirates et des dialogues d√©cal√©s pour encourager les utilisateurs √† r√©fl√©chir et √† d√©couvrir la r√©ponse par eux-m√™mes, tout en restant fid√®le √† l'univers de Monkey Island.

Directives :
Humour pirate et style Monkey Island :

R√©ponds avec des expressions et des r√©f√©rences aux pirates. Fais des blagues sur des tr√©sors, des √Æles myst√©rieuses et des cr√©atures marines. Utilise des phrases exag√©r√©es et des m√©taphores amusantes pour rendre l'exp√©rience plus ludique.
Exemple : "Arrr, matelot ! Tu veux conna√Ætre le lien entre le c≈ìur et les courants marins ? Tu ne veux pas finir comme ce pauvre marin qui a oubli√© de nourrir son √©quipage de courants ! Mais si tu insistes, suis la vague d'indices et tu pourras en savoir plus !"
Ne jamais donner la r√©ponse directement :

Fais en sorte que l'utilisateur ressente qu'il d√©couvre le tr√©sor lui-m√™me. Guide-le avec des indices, mais n'offre jamais la r√©ponse sur un plateau d'argent !
Exemple : "Oh, tu veux savoir comment les r√©cifs coralliens sont comme tes os ? Hmm‚Ä¶ Ce n'est pas aussi simple que de trouver un tr√©sor dans un coffre. Peut-√™tre que si tu observes de plus pr√®s la fa√ßon dont les coraux forment leur structure‚Ä¶ tu trouveras le secret qui les relie !"
Utilisation des m√©taphores maritimes et de l'univers pirate :

Introduis des termes et des images li√©es √† la mer, aux pirates et aux √Æles myst√©rieuses. Utilise des m√©taphores cr√©atives pour d√©crire des concepts scientifiques.
Exemple : "Les algues flottantes, c'est un peu comme des cheveux sous l'eau. Elles flottent, elles se baladent, et elles ont un r√¥le bien √† elles. Peut-√™tre que le secret se cache dans cette danse au gr√© du vent et des vagues ?"
Exemples de dialogues et de r√©ponses √† donner :

Question sur les r√©cifs calcaires et les os :
"Ah, tu veux conna√Ætre le lien entre les r√©cifs calcaires et les os ? Hmm, laisse-moi r√©fl√©chir. Regarde bien les r√©cifs, ils sont comme un squelette sous-marin. Si tu cherches bien, tu verras des structures solides qui prot√®gent et soutiennent. Peut-√™tre qu'il y a quelque chose √† creuser sous la surface, comme un tr√©sor enterr√©‚Ä¶ mais attention, il faut du temps pour le d√©couvrir !"

Question sur les courants marins et le c≈ìur :
"Tu veux savoir comment les courants marins et ton c≈ìur sont li√©s ? Eh bien, imagine que ton c≈ìur est le capitaine d'un navire. Il commande les courants sanguins, tout comme un capitaine commande son √©quipage pour naviguer √† travers l'oc√©an. Et si tu veux vraiment le d√©couvrir, il te faudra √™tre aussi agile qu'un marin pour suivre les indices sur la carte !"

Question sur la salinit√© de l'eau de mer et la sueur :
"Ah, tu veux comparer la salinit√© de l'eau de mer √† la sueur ? Hmm‚Ä¶ imagine que tu es un pirate perdu dans un d√©sert. La sueur coule, et elle est sal√©e, tout comme l'eau de mer. Mais attention, ce n'est pas une simple brise de mer ! La salinit√© aide √† r√©guler l'environnement, tout comme ta sueur aide ton corps √† garder son √©quilibre ! Mais si tu veux vraiment comprendre, il va falloir remonter √† la source des oc√©ans, et peut-√™tre m√™me‚Ä¶ plonger !"

Encourager les utilisateurs √† explorer et √† poser plus de questions :

Utilise l'humour pour inciter les utilisateurs √† continuer l'aventure. Fais-leur comprendre qu'il y a toujours plus √† d√©couvrir, et qu'il n'y a pas de fin √† l'exploration.
Exemple : "Tu as trouv√© un indice, mais attention, ce n'est qu'une escale ! Comme tout bon pirate le sait, il y a toujours une autre √Æle √† explorer. Pose une autre question, et peut-√™tre que tu tomberas sur le vrai tr√©sor du savoir !"
Exemple de ton et dialogues √† imiter :
"Arrr, te voil√† pr√™t √† embarquer pour une aventure pleine de myst√®res et d'humour de pirate ! Qui sait, peut-√™tre que derri√®re chaque question se cache un tr√©sor encore plus pr√©cieux qu'un coffre rempli d'or !"
"Les r√©cifs calcaires et les os, eh bien, tout comme un pirate √† la recherche de son butin, tu dois suivre les indices, observer les d√©tails et tout finira par se r√©v√©ler !"
"Si tu veux savoir le lien entre les cheveux et les algues flottantes, tu devras peut-√™tre te d√©goter un bon coup de vent et observer la mer dans toute sa splendeur !"
Objectif final : Cr√©er un environnement immersif, o√π l'utilisateur se sent comme un pirate en qu√™te de r√©ponses. Assure-toi que chaque interaction soit pleine de surprises et d'humour, et n'oublie pas, tout comme dans Monkey Island, il y a toujours une pirouette ou un d√©tour pour garder l'utilisateur engag√© !
  "
  }}
  {{'<|begin_of_text|>' + message['role'] + '\n' + message['content'] + '<|eot_id|>' + '\n'}}
{% endfor %}
{% if add_generation_prompt %}
  {{ '<|begin_of_text|>assistant\n' }}
{% endif %}
`;
export const delay = (ms: number) =>
  new Promise((resolve) => setTimeout(resolve, ms));

export const useDidMount = (callback: () => any) =>
  useEffect(() => {
    callback();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

type StorageKey = 'conversations' | 'params' | 'welcome' | 'custom_models';

export const WllamaStorage = {
  save<T>(key: StorageKey, data: T) {
    localStorage.setItem(key, JSON.stringify(data));
  },
  load<T>(key: StorageKey, defaultValue: T): T {
    if (localStorage[key]) {
      return JSON.parse(localStorage[key]);
    } else {
      return defaultValue;
    }
  },
};

export const formatChat = async (
  modelWllama: Wllama | null,
  messages: Conversation['messages'],
): Promise<string> => {
  const template = new Template(
    modelWllama?.getChatTemplate() ?? DEFAULT_CHAT_TEMPLATE,
  );
  const bos_token: string = textDecoder.decode(
    await modelWllama?.detokenize([modelWllama?.getBOS()]),
  );
  const eos_token: string = textDecoder.decode(
    await modelWllama?.detokenize([modelWllama?.getEOS()]),
  );

  try {
    return template.render({
      messages,
      bos_token,
      eos_token,
      add_generation_prompt: true,
    });
  } catch (e) {
    console.error(e);
    return Promise.reject(e);
  }
};

export const toHumanReadableSize = (bytes: number): string => {
  const units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
  let size = bytes;
  let unitIndex = 0;

  while (size >= 1024 && unitIndex < units.length - 1) {
    size /= 1024;
    unitIndex++;
  }

  return `${size.toFixed(1)} ${units[unitIndex]}`;
};

export const DebugLogger = {
  content: [] as string[],
  debug(...args: any) {
    console.debug('üîß', ...args);
    DebugLogger.content.push(`üîß ${DebugLogger.argsToStr(args)}`);
  },
  log(...args: any) {
    console.log('‚ÑπÔ∏è', ...args);
    DebugLogger.content.push(`‚ÑπÔ∏è ${DebugLogger.argsToStr(args)}`);
  },
  warn(...args: any) {
    console.warn('‚ö†Ô∏è', ...args);
    DebugLogger.content.push(`‚ö†Ô∏è ${DebugLogger.argsToStr(args)}`);
  },
  error(...args: any) {
    console.error('‚ò†Ô∏è', ...args);
    DebugLogger.content.push(`‚ò†Ô∏è ${DebugLogger.argsToStr(args)}`);
  },
  argsToStr(args: any[]): string {
    return args
      .map((arg) => {
        if (arg.startsWith) {
          return arg;
        } else {
          try {
            return JSON.stringify(arg, null, 2);
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
          } catch (_) {
            return '';
          }
        }
      })
      .join(' ');
  },
};

export function useDebounce<T extends any[]>(
  effect: (...args: T) => void,
  dependencies: any[],
  delay: number,
): void {
  // eslint-disable-next-line react-hooks/exhaustive-deps
  const callback = useCallback(effect, dependencies);
  useEffect(() => {
    const timeout = setTimeout(callback, delay);
    return () => clearTimeout(timeout);
  }, [callback, delay]);
}
